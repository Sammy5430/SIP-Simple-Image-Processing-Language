Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    SEMI

Grammar

Rule 0     S' -> statement
Rule 1     statement -> method
Rule 2     statement -> assignment
Rule 3     statement -> SIP_method_block
Rule 4     statement -> empty
Rule 5     assignment -> img_assignment
Rule 6     assignment -> method_assignment
Rule 7     method -> ID DOT method_np
Rule 8     method -> ID DOT method_1p
Rule 9     method -> ID DOT method_2p
Rule 10    method -> method_no
Rule 11    block_method -> method_np
Rule 12    block_method -> method_1p
Rule 13    block_method -> method_2p
Rule 14    method_list -> block_method
Rule 15    method_list -> block_method method_list
Rule 16    method_no -> METHOD_NO LP STRING RP
Rule 17    method_np -> METHOD_NP LP RP
Rule 18    method_1p -> METHOD_1P LP DIRECTION RP
Rule 19    method_1p -> METHOD_1P LP LEVEL RP
Rule 20    method_1p -> METHOD_1P LP STRING RP
Rule 21    method_2p -> METHOD_2P LP INT COMMA INT RP
Rule 22    img_assignment -> ID EQUALS ID
Rule 23    method_assignment -> ID EQUALS method
Rule 24    SIP_method_block -> ID LCB method_list RCB
Rule 25    empty -> <empty>

Terminals, with rules where they appear

COMMA                : 21
DIRECTION            : 18
DOT                  : 7 8 9
EQUALS               : 22 23
ID                   : 7 8 9 22 22 23 24
INT                  : 21 21
LCB                  : 24
LEVEL                : 19
LP                   : 16 17 18 19 20 21
METHOD_1P            : 18 19 20
METHOD_2P            : 21
METHOD_NO            : 16
METHOD_NP            : 17
RCB                  : 24
RP                   : 16 17 18 19 20 21
SEMI                 : 
STRING               : 16 20
error                : 

Nonterminals, with rules where they appear

SIP_method_block     : 3
assignment           : 2
block_method         : 14 15
empty                : 4
img_assignment       : 5
method               : 1 23
method_1p            : 8 12
method_2p            : 9 13
method_assignment    : 6
method_list          : 15 24
method_no            : 10
method_np            : 7 11
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . method
    (2) statement -> . assignment
    (3) statement -> . SIP_method_block
    (4) statement -> . empty
    (7) method -> . ID DOT method_np
    (8) method -> . ID DOT method_1p
    (9) method -> . ID DOT method_2p
    (10) method -> . method_no
    (5) assignment -> . img_assignment
    (6) assignment -> . method_assignment
    (24) SIP_method_block -> . ID LCB method_list RCB
    (25) empty -> .
    (16) method_no -> . METHOD_NO LP STRING RP
    (22) img_assignment -> . ID EQUALS ID
    (23) method_assignment -> . ID EQUALS method

    ID              shift and go to state 6
    $end            reduce using rule 25 (empty -> .)
    METHOD_NO       shift and go to state 10

    statement                      shift and go to state 1
    method                         shift and go to state 2
    assignment                     shift and go to state 3
    SIP_method_block               shift and go to state 4
    empty                          shift and go to state 5
    method_no                      shift and go to state 7
    img_assignment                 shift and go to state 8
    method_assignment              shift and go to state 9

state 1

    (0) S' -> statement .



state 2

    (1) statement -> method .

    $end            reduce using rule 1 (statement -> method .)


state 3

    (2) statement -> assignment .

    $end            reduce using rule 2 (statement -> assignment .)


state 4

    (3) statement -> SIP_method_block .

    $end            reduce using rule 3 (statement -> SIP_method_block .)


state 5

    (4) statement -> empty .

    $end            reduce using rule 4 (statement -> empty .)


state 6

    (7) method -> ID . DOT method_np
    (8) method -> ID . DOT method_1p
    (9) method -> ID . DOT method_2p
    (24) SIP_method_block -> ID . LCB method_list RCB
    (22) img_assignment -> ID . EQUALS ID
    (23) method_assignment -> ID . EQUALS method

    DOT             shift and go to state 11
    LCB             shift and go to state 12
    EQUALS          shift and go to state 13


state 7

    (10) method -> method_no .

    $end            reduce using rule 10 (method -> method_no .)


state 8

    (5) assignment -> img_assignment .

    $end            reduce using rule 5 (assignment -> img_assignment .)


state 9

    (6) assignment -> method_assignment .

    $end            reduce using rule 6 (assignment -> method_assignment .)


state 10

    (16) method_no -> METHOD_NO . LP STRING RP

    LP              shift and go to state 14


state 11

    (7) method -> ID DOT . method_np
    (8) method -> ID DOT . method_1p
    (9) method -> ID DOT . method_2p
    (17) method_np -> . METHOD_NP LP RP
    (18) method_1p -> . METHOD_1P LP DIRECTION RP
    (19) method_1p -> . METHOD_1P LP LEVEL RP
    (20) method_1p -> . METHOD_1P LP STRING RP
    (21) method_2p -> . METHOD_2P LP INT COMMA INT RP

    METHOD_NP       shift and go to state 18
    METHOD_1P       shift and go to state 19
    METHOD_2P       shift and go to state 20

    method_np                      shift and go to state 15
    method_1p                      shift and go to state 16
    method_2p                      shift and go to state 17

state 12

    (24) SIP_method_block -> ID LCB . method_list RCB
    (14) method_list -> . block_method
    (15) method_list -> . block_method method_list
    (11) block_method -> . method_np
    (12) block_method -> . method_1p
    (13) block_method -> . method_2p
    (17) method_np -> . METHOD_NP LP RP
    (18) method_1p -> . METHOD_1P LP DIRECTION RP
    (19) method_1p -> . METHOD_1P LP LEVEL RP
    (20) method_1p -> . METHOD_1P LP STRING RP
    (21) method_2p -> . METHOD_2P LP INT COMMA INT RP

    METHOD_NP       shift and go to state 18
    METHOD_1P       shift and go to state 19
    METHOD_2P       shift and go to state 20

    method_list                    shift and go to state 21
    block_method                   shift and go to state 22
    method_np                      shift and go to state 23
    method_1p                      shift and go to state 24
    method_2p                      shift and go to state 25

state 13

    (22) img_assignment -> ID EQUALS . ID
    (23) method_assignment -> ID EQUALS . method
    (7) method -> . ID DOT method_np
    (8) method -> . ID DOT method_1p
    (9) method -> . ID DOT method_2p
    (10) method -> . method_no
    (16) method_no -> . METHOD_NO LP STRING RP

    ID              shift and go to state 26
    METHOD_NO       shift and go to state 10

    method                         shift and go to state 27
    method_no                      shift and go to state 7

state 14

    (16) method_no -> METHOD_NO LP . STRING RP

    STRING          shift and go to state 28


state 15

    (7) method -> ID DOT method_np .

    $end            reduce using rule 7 (method -> ID DOT method_np .)


state 16

    (8) method -> ID DOT method_1p .

    $end            reduce using rule 8 (method -> ID DOT method_1p .)


state 17

    (9) method -> ID DOT method_2p .

    $end            reduce using rule 9 (method -> ID DOT method_2p .)


state 18

    (17) method_np -> METHOD_NP . LP RP

    LP              shift and go to state 29


state 19

    (18) method_1p -> METHOD_1P . LP DIRECTION RP
    (19) method_1p -> METHOD_1P . LP LEVEL RP
    (20) method_1p -> METHOD_1P . LP STRING RP

    LP              shift and go to state 30


state 20

    (21) method_2p -> METHOD_2P . LP INT COMMA INT RP

    LP              shift and go to state 31


state 21

    (24) SIP_method_block -> ID LCB method_list . RCB

    RCB             shift and go to state 32


state 22

    (14) method_list -> block_method .
    (15) method_list -> block_method . method_list
    (14) method_list -> . block_method
    (15) method_list -> . block_method method_list
    (11) block_method -> . method_np
    (12) block_method -> . method_1p
    (13) block_method -> . method_2p
    (17) method_np -> . METHOD_NP LP RP
    (18) method_1p -> . METHOD_1P LP DIRECTION RP
    (19) method_1p -> . METHOD_1P LP LEVEL RP
    (20) method_1p -> . METHOD_1P LP STRING RP
    (21) method_2p -> . METHOD_2P LP INT COMMA INT RP

    RCB             reduce using rule 14 (method_list -> block_method .)
    METHOD_NP       shift and go to state 18
    METHOD_1P       shift and go to state 19
    METHOD_2P       shift and go to state 20

    block_method                   shift and go to state 22
    method_list                    shift and go to state 33
    method_np                      shift and go to state 23
    method_1p                      shift and go to state 24
    method_2p                      shift and go to state 25

state 23

    (11) block_method -> method_np .

    METHOD_NP       reduce using rule 11 (block_method -> method_np .)
    METHOD_1P       reduce using rule 11 (block_method -> method_np .)
    METHOD_2P       reduce using rule 11 (block_method -> method_np .)
    RCB             reduce using rule 11 (block_method -> method_np .)


state 24

    (12) block_method -> method_1p .

    METHOD_NP       reduce using rule 12 (block_method -> method_1p .)
    METHOD_1P       reduce using rule 12 (block_method -> method_1p .)
    METHOD_2P       reduce using rule 12 (block_method -> method_1p .)
    RCB             reduce using rule 12 (block_method -> method_1p .)


state 25

    (13) block_method -> method_2p .

    METHOD_NP       reduce using rule 13 (block_method -> method_2p .)
    METHOD_1P       reduce using rule 13 (block_method -> method_2p .)
    METHOD_2P       reduce using rule 13 (block_method -> method_2p .)
    RCB             reduce using rule 13 (block_method -> method_2p .)


state 26

    (22) img_assignment -> ID EQUALS ID .
    (7) method -> ID . DOT method_np
    (8) method -> ID . DOT method_1p
    (9) method -> ID . DOT method_2p

    $end            reduce using rule 22 (img_assignment -> ID EQUALS ID .)
    DOT             shift and go to state 11


state 27

    (23) method_assignment -> ID EQUALS method .

    $end            reduce using rule 23 (method_assignment -> ID EQUALS method .)


state 28

    (16) method_no -> METHOD_NO LP STRING . RP

    RP              shift and go to state 34


state 29

    (17) method_np -> METHOD_NP LP . RP

    RP              shift and go to state 35


state 30

    (18) method_1p -> METHOD_1P LP . DIRECTION RP
    (19) method_1p -> METHOD_1P LP . LEVEL RP
    (20) method_1p -> METHOD_1P LP . STRING RP

    DIRECTION       shift and go to state 36
    LEVEL           shift and go to state 37
    STRING          shift and go to state 38


state 31

    (21) method_2p -> METHOD_2P LP . INT COMMA INT RP

    INT             shift and go to state 39


state 32

    (24) SIP_method_block -> ID LCB method_list RCB .

    $end            reduce using rule 24 (SIP_method_block -> ID LCB method_list RCB .)


state 33

    (15) method_list -> block_method method_list .

    RCB             reduce using rule 15 (method_list -> block_method method_list .)


state 34

    (16) method_no -> METHOD_NO LP STRING RP .

    $end            reduce using rule 16 (method_no -> METHOD_NO LP STRING RP .)


state 35

    (17) method_np -> METHOD_NP LP RP .

    $end            reduce using rule 17 (method_np -> METHOD_NP LP RP .)
    METHOD_NP       reduce using rule 17 (method_np -> METHOD_NP LP RP .)
    METHOD_1P       reduce using rule 17 (method_np -> METHOD_NP LP RP .)
    METHOD_2P       reduce using rule 17 (method_np -> METHOD_NP LP RP .)
    RCB             reduce using rule 17 (method_np -> METHOD_NP LP RP .)


state 36

    (18) method_1p -> METHOD_1P LP DIRECTION . RP

    RP              shift and go to state 40


state 37

    (19) method_1p -> METHOD_1P LP LEVEL . RP

    RP              shift and go to state 41


state 38

    (20) method_1p -> METHOD_1P LP STRING . RP

    RP              shift and go to state 42


state 39

    (21) method_2p -> METHOD_2P LP INT . COMMA INT RP

    COMMA           shift and go to state 43


state 40

    (18) method_1p -> METHOD_1P LP DIRECTION RP .

    $end            reduce using rule 18 (method_1p -> METHOD_1P LP DIRECTION RP .)
    METHOD_NP       reduce using rule 18 (method_1p -> METHOD_1P LP DIRECTION RP .)
    METHOD_1P       reduce using rule 18 (method_1p -> METHOD_1P LP DIRECTION RP .)
    METHOD_2P       reduce using rule 18 (method_1p -> METHOD_1P LP DIRECTION RP .)
    RCB             reduce using rule 18 (method_1p -> METHOD_1P LP DIRECTION RP .)


state 41

    (19) method_1p -> METHOD_1P LP LEVEL RP .

    $end            reduce using rule 19 (method_1p -> METHOD_1P LP LEVEL RP .)
    METHOD_NP       reduce using rule 19 (method_1p -> METHOD_1P LP LEVEL RP .)
    METHOD_1P       reduce using rule 19 (method_1p -> METHOD_1P LP LEVEL RP .)
    METHOD_2P       reduce using rule 19 (method_1p -> METHOD_1P LP LEVEL RP .)
    RCB             reduce using rule 19 (method_1p -> METHOD_1P LP LEVEL RP .)


state 42

    (20) method_1p -> METHOD_1P LP STRING RP .

    $end            reduce using rule 20 (method_1p -> METHOD_1P LP STRING RP .)
    METHOD_NP       reduce using rule 20 (method_1p -> METHOD_1P LP STRING RP .)
    METHOD_1P       reduce using rule 20 (method_1p -> METHOD_1P LP STRING RP .)
    METHOD_2P       reduce using rule 20 (method_1p -> METHOD_1P LP STRING RP .)
    RCB             reduce using rule 20 (method_1p -> METHOD_1P LP STRING RP .)


state 43

    (21) method_2p -> METHOD_2P LP INT COMMA . INT RP

    INT             shift and go to state 44


state 44

    (21) method_2p -> METHOD_2P LP INT COMMA INT . RP

    RP              shift and go to state 45


state 45

    (21) method_2p -> METHOD_2P LP INT COMMA INT RP .

    $end            reduce using rule 21 (method_2p -> METHOD_2P LP INT COMMA INT RP .)
    METHOD_NP       reduce using rule 21 (method_2p -> METHOD_2P LP INT COMMA INT RP .)
    METHOD_1P       reduce using rule 21 (method_2p -> METHOD_2P LP INT COMMA INT RP .)
    METHOD_2P       reduce using rule 21 (method_2p -> METHOD_2P LP INT COMMA INT RP .)
    RCB             reduce using rule 21 (method_2p -> METHOD_2P LP INT COMMA INT RP .)

